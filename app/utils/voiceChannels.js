const { EmbedBuilder, PermissionFlagsBits, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');

/* ========================================================================== */
/*                              UTILITY FUNCTIONS                             */
/* ========================================================================== */
async function IsVoiceChannel(channel) {
	const { GuildSchema } = process.mongo;

	let guildId = channel.guild.id
	let guildData = await GuildSchema.findOne({ Guild: guildId })
	if (!guildData) return false

	return channel.parentId == guildData.VoiceCategory
}

function GetOwner(channel) {
	let perms = channel.permissionOverwrites.cache
	let owner = perms.find(p => p.allow.has(PermissionFlagsBits.ManageChannels))
	owner = owner?.id

	return owner
}

async function GetTextChannel(channel, guildData) {
	if (!guildData) {
		const { GuildSchema } = process.mongo;

		guildData = await GuildSchema.findOne({ Guild: channel.guild.id })
		if (!guildData) return false
	}

	let channels = await channel.guild.channels.fetch()
	return channels.find(chn => chn.parentId == guildData.VoiceTextCategory && chn.topic == channel.id) || false
}

async function GetVoiceChannel(channel) {
	return await channel.guild.channels.fetch(channel.topic)
}

async function UpdateMenu(channel, voiceChannel) {
	channel = channel || voiceChannel && await GetTextChannel(voiceChannel)
	voiceChannel = voiceChannel || channel && await GetVoiceChannel(channel)

	const guild = channel.guild
	let messages = await channel.messages.fetch()
	let menu = messages.filter(msg => msg.content == "")
	menu = menu.first()

	const { GuildSchema } = process.mongo;
	let guildData = await GuildSchema.findOne({ Guild: guild.id })
	if (!guildData) return false

	const embed = menu.embeds[0];
	const creatorId = embed.description.match(/–°–æ–∑–¥–∞—Ç–µ–ª—å: <@([0-9]+)*?>+/i)
	const ownerId = GetOwner(voiceChannel)

	const voicePerms = voiceChannel.permissionOverwrites.cache
	const everyoneId = guildData.Settings.RegRole || guild.id
	const everyonePerms = voicePerms.find(p => p.id == everyoneId)

	const isHidden = everyonePerms?.deny.has(PermissionFlagsBits.ViewChannel)
	const isClosed = everyonePerms?.deny.has(PermissionFlagsBits.Connect)

	let channelStatus = '–ö–∞–Ω–∞–ª —Å–µ–π—á–∞—Å –æ—Ç–∫—Ä—ã—Ç. –ü—Ä–∏—Ö–æ–¥—è—Ç –≤—Å–µ!'
	if (isHidden)
		channelStatus = '–ö–∞–Ω–∞–ª —Å–µ–π—á–∞—Å —Å–∫—Ä—ã—Ç. –¢–æ–ª—å–∫–æ –≤—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è.'
	else if (isClosed)
		channelStatus = '–ö–∞–Ω–∞–ª —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç. –ü—É—Å—Ç—å –≤—Å–µ —É–≤–∏–¥—è—Ç, –∫–∞–∫ –≤—ã —Ç—É—Ç –∑–∞–∫—Ä—ã–ª–∏—Å—å.'

	// BUTTONS
	let buttons = []
	let buttons2 = []
	if (isClosed || isHidden) {
		buttons.push(new ButtonBuilder()
			.setCustomId('voice:unlock')
			.setLabel('–û—Ç–∫—Ä—ã—Ç—å')
			.setEmoji('üîì')
			.setStyle(ButtonStyle.Success))
	}

	if (!isClosed) {
		buttons.push(new ButtonBuilder()
			.setCustomId('voice:lock')
			.setLabel('–ó–∞–∫—Ä—ã—Ç—å')
			.setEmoji('üîí')
			.setStyle(ButtonStyle.Danger))
	}

	if (!isHidden) {
		buttons.push(new ButtonBuilder()
			.setCustomId('voice:hide')
			.setLabel('–°–ø—Ä—è—Ç–∞—Ç—å')
			.setEmoji('üö∑')
			.setStyle(ButtonStyle.Secondary))
	}

	buttons.push(new ButtonBuilder()
		.setCustomId('voice:owner')
		.setLabel('–°–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞')
		.setEmoji('üëë')
		.setStyle(ButtonStyle.Primary))

	// row 2
	buttons2.push(new ButtonBuilder()
		.setCustomId('voice:name')
		.setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
		.setEmoji('üìù')
		.setStyle(ButtonStyle.Primary))

	buttons2.push(new ButtonBuilder()
		.setCustomId('voice:limit')
		.setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
		.setEmoji('ü§∏üèª')
		.setStyle(ButtonStyle.Primary))

	buttons2.push(new ButtonBuilder()
		.setCustomId('voice:nsfw')
		.setLabel('–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ')
		.setEmoji('üîû')
		.setStyle(ButtonStyle.Primary))

	buttons2.push(new ButtonBuilder()
		.setCustomId('voice:br')
		.setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –±–∏—Ç—Ä–µ–π—Ç')
		.setEmoji('üéöÔ∏è')
		.setStyle(ButtonStyle.Primary))
	// BUTTONS END

	const newEmbed = EmbedBuilder.from(embed)
		.setDescription(`–ö–æ–º–Ω–∞—Ç–∞: <#${channel.topic}>
			–í–ª–∞–¥–µ–ª–µ—Ü: <@${ownerId}>
			–°–æ–∑–¥–∞—Ç–µ–ª—å: <@${creatorId[1]}>

			–ë–∏—Ç—Ä–µ–π—Ç: ${voiceChannel.bitrate / 1000} kbps
			–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ${voiceChannel.nsfw ? "‚úÖ" : "‚ùé"}

			${channelStatus}`)

	const row = new ActionRowBuilder()
		.addComponents(buttons)
	const row2 = new ActionRowBuilder()
		.addComponents(buttons2)

	menu.edit({ embeds: [newEmbed], components: [row, row2] })
}

async function RandomOwner(channel, textChannel, channelMembers, guildData) {
	if (!guildData) {
		const { GuildSchema } = process.mongo;

		guildData = await GuildSchema.findOne({ Guild: channel.guild.id })
		if (!guildData) return false
	}

	try {
		textChannel = textChannel || await GetTextChannel(channel, guildData)
		channelMembers = channelMembers || channel.members

		const oldOwnerId = GetOwner(channel);
		const oldOwner = await channel.guild.members.fetch(oldOwnerId);
		const newOwner = channelMembers.random();

		await channel.permissionOverwrites.edit(newOwner.id, {
			ManageChannels: true,
			MoveMembers: true,
			ViewChannel: true,
			Connect: true
		})
		await channel.permissionOverwrites.edit(oldOwner.id, {
			ManageChannels: null,
			MoveMembers: null,
			Connect: null,
		})
		await textChannel.permissionOverwrites.edit(newOwner.id, {
			ViewChannel: true,
		})
		await textChannel.permissionOverwrites.edit(oldOwner.id, {
			ViewChannel: null,
		})

		UpdateMenu(textChannel, channel)
		channel.send({ content: `<@${oldOwner.id}> –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª. –ö–∞–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–Ω <@${newOwner.id}>`, allowedMentions: { users: [newOwner.id] } });
		VoiceLog(channel, '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞', `–£—á–∞—Å—Ç–Ω–∏–∫: <@${oldOwner.id}>\n–ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: <@${newOwner.id}>`, { iconURL: `https://i.imgur.com/Tr9tWIZ.png`, color: `#980000` })
	} catch (e) {
		console.error(e)
		return false
	}

	return true
}

let logChannel
async function VoiceLog(channel, title, desc = '', options = {}) {
	if (!channel)
		return;

	try {
		const { GuildSchema } = process.mongo;
		const guildData = await GuildSchema.findOne({ Guild: channel.guild.id })
		if (!guildData || !guildData.Settings.VoiceLogs) return false

		if (!logChannel || logChannel?.id != guildData.Settings.VoiceLogs) {
			logChannel = await channel.guild.channels.fetch(guildData.Settings.VoiceLogs)
		}

		const embed = new EmbedBuilder()
			.setColor(options.color ? options.color : null)
			.setAuthor({ name: title, iconURL: options.iconURL ? options.iconURL : null })
			.setDescription(`–ö–∞–Ω–∞–ª: [${channel.name}](${channel.url})\n${desc}`)
			.setFooter({ text: channel.id, iconURL: `https://i.imgur.com/tVIEu1F.png` })
			.setTimestamp(Date.now())

		await logChannel.send({ embeds: [embed], allowedMentions: { repliedUser: false } })
	} catch (e) {
		console.error(e)
	}
}

const emojiRegex = /([\uE000-\uF8FF]|\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDDFF])/g;
const stateEmojis = {
	'hide': "üëª",
	"lock": "üîí",
	"unlock": "üîì",
}
async function VoiceEmojiName(channel) {
	try {
		const oldName = channel.name
		let name = channel.name

		let emojiPos = name.search(emojiRegex)
		let emoji = emojiPos > -1 && name.match(emojiRegex)[0]
		if (emojiPos == 0 && Object.values(stateEmojis).includes(emoji)) {
			name = name.substring(emoji.length).trim()
		}

		const voicePerms = channel.permissionOverwrites.cache
		const everyonePerms = voicePerms.find(p => p.id == channel.guild.id)

		const isHidden = everyonePerms?.deny.has(PermissionFlagsBits.ViewChannel)
		const isClosed = everyonePerms?.deny.has(PermissionFlagsBits.Connect)

		let nameEmoji = stateEmojis.unlock
		if (isHidden)
			nameEmoji = stateEmojis.hide
		else if (isClosed)
			nameEmoji = stateEmojis.lock

		name = `${nameEmoji} ${name}`
		if (oldName != name) {
			await channel.edit({ name })
		}
	} catch (e) {
		console.error(e)
		return false
	}

	return true
}

/* ========================================================================== */
/*                                  COMMANDS                                  */
/* ========================================================================== */
const stateText = {
	"hide": "—Å–∫—Ä—ã—Ç",
	"lock": "–∑–∞–∫—Ä—ã—Ç",
	"unlock": "–æ—Ç–∫—Ä—ã—Ç",
}
async function SetVoiceState(interaction, voiceChannel, newState) {
	let guild = voiceChannel.guild
	let newPerms = {
		ViewChannel: true,
		Connect: true,
	}

	switch (newState) {
		case "lock":
			newPerms.Connect = false
			break;
		case "hide":
			newPerms.ViewChannel = false
			break;
	}

	const { GuildSchema } = process.mongo;
	let guildData = await GuildSchema.findOne({ Guild: guild.id })
	if (!guildData) return false
	const everyoneId = guildData.Settings.RegRole || guild.id

	await voiceChannel.permissionOverwrites.edit(everyoneId, newPerms)
	await UpdateMenu(false, voiceChannel)
	await interaction.reply({ content: `–ö–∞–Ω–∞–ª —Ç–µ–ø–µ—Ä—å ${stateText[newState]}.`, ephemeral: true })
	// await VoiceEmojiName(voiceChannel)
	VoiceLog(voiceChannel, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞', `–í–∏–¥–∏–º–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞: ${stateText[newState]}`, { iconURL: `https://i.imgur.com/KXzPGrU.png`, color: `#47C8FF` })
	return true
}

async function SetVoiceOwner(interaction, voiceChannel, newOwner) {
	if (!newOwner.voice || newOwner.voice.channelId != voiceChannel.id) {
		await interaction.reply({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º –ª–∏—á–Ω–æ–º –∫–∞–Ω–∞–ª–µ.`, ephemeral: true })
		return true
	}

	let voiceOwner = GetOwner(voiceChannel)
	if (voiceOwner == newOwner.id) {
		await interaction.reply({ content: `–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–ª–∞–¥–µ–ª–µ–µ—Ç —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–≤.`, ephemeral: true })
		return true
	}

	await voiceChannel.permissionOverwrites.edit(newOwner.id, {
		ManageChannels: true,
		MoveMembers: true,
		ViewChannel: true,
		Connect: true
	})
	await voiceChannel.permissionOverwrites.edit(voiceOwner, {
		ManageChannels: null,
		MoveMembers: null,
		Connect: null,
	})

	try {
		await interaction.reply({ content: `–ö–∞–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–Ω <@${newOwner.id}>.`, ephemeral: true })
	} catch (e) { }

	let textChannel = await GetTextChannel(voiceChannel)
	await textChannel.permissionOverwrites.edit(newOwner.id, {
		ViewChannel: true,
	})
	await textChannel.permissionOverwrites.edit(voiceOwner, {
		ViewChannel: null,
	})


	await UpdateMenu(textChannel, voiceChannel)
	await voiceChannel.send({ content: `–ö–∞–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–Ω <@${newOwner.id}>.`, allowedMentions: { users: [newOwner.id] } })
	VoiceLog(voiceChannel, '–ü–µ—Ä–µ–¥–∞—á–∞ –∫–∞–Ω–∞–ª–∞', `–ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: <@${newOwner.id}>`, { iconURL: `https://i.imgur.com/lw7Bghn.png`, color: `#FF6B00` })
	return true
}

async function VoiceInvite(interaction, voiceChannel, member, ping)
{
	if (member.user.bot)
	{
		await interaction.reply({ content: `–ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –±–æ—Ç–æ–≤ üíÄ`, ephemeral: true })
		return true
	}

	if (member.voice?.channelId == voiceChannel.id)
	{
		await interaction.reply({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${member.id}> —É–∂–µ –∑–¥–µ—Å—å.`, ephemeral: true })
		return true
	}

	let memberPerms = voiceChannel.permissionOverwrites.cache.get(member.id)
	if (memberPerms?.allow.has(PermissionFlagsBits.ViewChannel))
	{
		await voiceChannel.send({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${member.id}> —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.`, allowedMentions: { users: [member.id] } })
		return false
	}

	voiceChannel.permissionOverwrites.create(member.id, {
		Connect: true,
		ViewChannel: true,
	})

	if (ping)
		member.user.send(`<@${interaction.user.id}> –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –í–∞—Å –≤ –∫–∞–Ω–∞–ª <#${voiceChannel.id}>!`).catch(e => console.error(e))

	await interaction.reply({ content: `<@${member.id}> –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –∫–∞–Ω–∞–ª.`, allowedMentions: { users: [member.id] }, ephemeral: true })
	// TODO: @relitrix, —Å–¥–µ–ª–∞–π –∑–Ω–∞—á–∫–∏
	VoiceLog(voiceChannel, '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª', `–ü—Ä–∏–≥–ª–∞—à–µ–Ω: <@${member.id}>`, { iconURL: `https://i.imgur.com/p7Fx3sA.png`, color: `#D10000` })
	return true
}

async function VoiceBan(interaction, voiceChannel, member) {
	let voiceOwner = GetOwner(voiceChannel)
	if (voiceOwner == member.id) {
		await interaction.reply({ content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.`, ephemeral: true })
		return true
	}

	let memberPerms = voiceChannel.permissionOverwrites.cache.get(member.id)
	let isBanned = memberPerms?.deny.has(PermissionFlagsBits.ViewChannel) || false
	voiceChannel.permissionOverwrites.create(member.id, {
		Connect: null,
		ViewChannel: isBanned,
	})

	if (!isBanned && voiceChannel.members.has(member.id))
		member.voice.disconnect("–ó–∞–±–∞–Ω–µ–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")

	await interaction.reply({ content: `<@${member.id}> –±—ã–ª ${isBanned ? "—Ä–∞–∑–±–∞–Ω–µ–Ω" : "–∑–∞–±–∞–Ω–µ–Ω"}.`, allowedMentions: { users: [member.id] }, ephemeral: true })
	VoiceLog(voiceChannel, '–ë–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ', `<@${member.id}> –±—ã–ª ${isBanned ? "—Ä–∞–∑–±–∞–Ω–µ–Ω" : "–∑–∞–±–∞–Ω–µ–Ω"}`, { iconURL: isBanned ? `https://i.imgur.com/H0JFOah.png` : `https://i.imgur.com/L5EWJTe.png`, color: isBanned ? `#00D12E` : `#D10000` })
	return true
}

async function VoiceKick(interaction, voiceChannel, member) {
	if (!member.voice || member.voice.channelId != voiceChannel.id) {
		await interaction.reply({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º –ª–∏—á–Ω–æ–º –∫–∞–Ω–∞–ª–µ.`, ephemeral: true })
		return true
	}

	let voiceOwner = GetOwner(voiceChannel)
	if (voiceOwner == member.id) {
		await interaction.reply({ content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≥–Ω–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.`, ephemeral: true })
		return true
	}

	member.voice.disconnect("–ö–∏–∫–Ω—É—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞.")

	await interaction.reply({ content: `–ö–∏–∫–∞–µ–º <@${member.id}>.`, allowedMentions: { users: [member.id] }, ephemeral: true })
	VoiceLog(voiceChannel, '–ö–∏–∫ –≤ –∫–∞–Ω–∞–ª–µ', `–£—á–∞—Å—Ç–Ω–∏–∫: <@${member.id}>`, { iconURL: `https://i.imgur.com/p7Fx3sA.png`, color: `#D10000` })
	return true
}

async function SetVoiceName(interaction, voiceChannel, name) {
	name = name && name.trim()
	if (!name || name == "") {
		await interaction.reply({ content: `–û—à–∏–±–∫–∞! –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.`, ephemeral: true })
		return false
	}

	try {
		await voiceChannel.edit({ name })
	} catch (e) {
		await interaction.reply({ content: `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!`, ephemeral: true })
		return false
	}
	await interaction.reply({ content: `–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: \`${name}\``, ephemeral: true })
	return true
}

async function SetVoiceNsfw(interaction, voiceChannel, nsfw) {
	await voiceChannel.edit({ nsfw })
	await UpdateMenu(false, voiceChannel)
	await interaction.reply({ content: `–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ${nsfw ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ"}`, ephemeral: true })
	return true
}

async function SetVoiceBitrate(interaction, voiceChannel, bitrate) {
	bitrate = Math.max(Math.min(bitrate, 96), 8)

	await voiceChannel.edit({ bitrate: bitrate * 1000 })
	await UpdateMenu(false, voiceChannel)
	await interaction.reply({ content: `–ë–∏—Ç—Ä–µ–π—Ç —Ç–µ–ø–µ—Ä—å: ${bitrate} kbps`, ephemeral: true })
	return true
}


async function SetVoiceUserLimit(interaction, voiceChannel, userLimit) {
	userLimit = Math.max(Math.min(userLimit, 99), 0)
	await voiceChannel.edit({ userLimit })

	let content = userLimit > 0 ? `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userLimit}` : `–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–±—Ä–∞–Ω`
	await interaction.reply({ content, ephemeral: true })

	return true
}

/* ========================================================================== */
/*                                   EXPORT                                   */
/* ========================================================================== */
module.exports = {
	IsVoiceChannel,
	GetOwner,
	GetTextChannel,
	GetVoiceChannel,
	RandomOwner,
	UpdateMenu,
	VoiceLog,
	VoiceEmojiName,

	Commands: {
		SetVoiceState,
		SetVoiceOwner,
		VoiceInvite,
		VoiceBan,
		VoiceKick,
		SetVoiceName,
		SetVoiceNsfw,
		SetVoiceBitrate,
		SetVoiceUserLimit,
	},
}