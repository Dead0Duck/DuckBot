const { EmbedBuilder, PermissionFlagsBits, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');

/* ========================================================================== */
/*                              UTILITY FUNCTIONS                             */
/* ========================================================================== */
async function IsVoiceChannel(channel)
{
	const { GuildSchema } = process.mongo;

	let guildId = channel.guild.id
	let guildData = await GuildSchema.findOne({ Guild: guildId })
	if (!guildData) return false

	return channel.parentId == guildData.VoiceCategory
}

function GetOwner(channel)
{
    let perms = channel.permissionOverwrites.cache
    let owner = perms.find(p => p.allow.has(PermissionFlagsBits.ManageChannels))
    owner = owner?.id

    return owner
}

async function GetTextChannel(channel, guildData)
{
	if (!guildData)
	{
		const { GuildSchema } = process.mongo;

		guildData = await GuildSchema.findOne({ Guild: channel.guild.id })
		if (!guildData) return false
	}

	let channels = await channel.guild.channels.fetch()
	return channels.find(chn => chn.parentId == guildData.VoiceTextCategory && chn.topic == channel.id) || false
}

async function GetVoiceChannel(channel)
{
	return await channel.guild.channels.fetch(channel.topic)
}

async function UpdateMenu(channel, voiceChannel)
{
	channel = channel || voiceChannel && await GetTextChannel(voiceChannel)
	voiceChannel = voiceChannel || channel && await GetVoiceChannel(channel)

	const guild = channel.guild
	let menu = await channel.messages.fetch({ limit: 1 })
	menu = menu.first()

	const embed = menu.embeds[0];
	const creatorId = embed.description.match(/–°–æ–∑–¥–∞—Ç–µ–ª—å: <@([0-9]+)*?>+/i)
	const ownerId = GetOwner(voiceChannel)

	const voicePerms = voiceChannel.permissionOverwrites.cache
	const everyonePerms = voicePerms.find(p => p.id == guild.id)

	const isHidden = everyonePerms?.deny.has(PermissionFlagsBits.ViewChannel)
	const isClosed = everyonePerms?.deny.has(PermissionFlagsBits.Connect)

	let channelStatus = '–ö–∞–Ω–∞–ª —Å–µ–π—á–∞—Å –æ—Ç–∫—Ä—ã—Ç. –ü—Ä–∏—Ö–æ–¥—è—Ç –≤—Å–µ!'
	if (isHidden)
		channelStatus = '–ö–∞–Ω–∞–ª —Å–µ–π—á–∞—Å —Å–∫—Ä—ã—Ç. –¢–æ–ª—å–∫–æ –≤—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è.'
	else if (isClosed)
		channelStatus = '–ö–∞–Ω–∞–ª —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç. –ü—É—Å—Ç—å –≤—Å–µ —É–≤–∏–¥—è—Ç, –∫–∞–∫ –≤—ã —Ç—É—Ç –∑–∞–∫—Ä—ã–ª–∏—Å—å.'

	// BUTTONS
	let buttons = []
	if (isClosed || isHidden)
	{
		const button = new ButtonBuilder()
			.setCustomId('voice:unlock')
			.setLabel('–û—Ç–∫—Ä—ã—Ç—å')
			.setEmoji('üîì')
			.setStyle(ButtonStyle.Success);
		buttons.push(button)
	}

	if (!isClosed)
	{
		const button = new ButtonBuilder()
			.setCustomId('voice:lock')
			.setLabel('–ó–∞–∫—Ä—ã—Ç—å')
			.setEmoji('üîí')
			.setStyle(ButtonStyle.Danger);
		buttons.push(button)
	}

	if (!isHidden)
	{
		const button = new ButtonBuilder()
			.setCustomId('voice:hide')
			.setLabel('–°–ø—Ä—è—Ç–∞—Ç—å')
			.setEmoji('üö∑')
			.setStyle(ButtonStyle.Secondary);
		buttons.push(button)
	}

	const button = new ButtonBuilder()
		.setCustomId('voice:owner')
		.setLabel('–°–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞')
		.setEmoji('üëë')
		.setStyle(ButtonStyle.Primary);
	buttons.push(button)
	// BUTTONS END

	const newEmbed = EmbedBuilder.from(embed)
		.setDescription(`–ö–æ–º–Ω–∞—Ç–∞: <#${channel.topic}>\n–í–ª–∞–¥–µ–ª–µ—Ü: <@${ownerId}>\n–°–æ–∑–¥–∞—Ç–µ–ª—å: <@${creatorId[1]}>\n\n${channelStatus}`)

	const row = new ActionRowBuilder().addComponents(buttons);
	menu.edit({ embeds: [newEmbed], components: [row] })
}

async function RandomOwner(channel, textChannel, channelMembers, guildData)
{
	if (!guildData)
	{
		const { GuildSchema } = process.mongo;

		guildData = await GuildSchema.findOne({ Guild: channel.guild.id })
		if (!guildData) return false
	}

	try {
		textChannel = textChannel || await GetTextChannel(channel, guildData)
		channelMembers = channelMembers || channel.members

		const oldOwnerId = GetOwner(channel);
		const oldOwner = await channel.guild.members.fetch(oldOwnerId);
		const newOwner = channelMembers.random();

		await channel.permissionOverwrites.edit(newOwner.id, {
			ManageChannels: true,
			MoveMembers: true,
			ViewChannel: true,
			Connect: true
		})
		await channel.permissionOverwrites.edit(oldOwner.id, {
			ManageChannels: null,
			MoveMembers: null,
			Connect: null,
		})
		await textChannel.permissionOverwrites.edit(newOwner.id, {
			ViewChannel: true,
		})
		await textChannel.permissionOverwrites.edit(oldOwner.id, {
			ViewChannel: null,
		})

		UpdateMenu(textChannel, channel)
		channel.send({content: `<@${oldOwner.id}> –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª. –ö–∞–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–Ω <@${newOwner.id}>`, allowedMentions: { users: [newOwner.id] }});
		VoiceLog(channel, '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª—É', `–£—á–∞—Å—Ç–Ω–∏–∫: <@${oldOwner.id}>\n–ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: ${newOwner.id}`)
	} catch (e) {
		console.error(e)
		return false
	}

	return true
}

let logChannel
async function VoiceLog(channel, title, desc = '')
{
	const { GuildSchema } = process.mongo;
	const guildData = await GuildSchema.findOne({ Guild: channel.guild.id })
	if (!guildData || !guildData.Settings.VoiceLogs) return false
	
	if (!logChannel || logChannel?.id != guildData.Settings.VoiceLogs)
	{
		logChannel = await channel.guild.channels.fetch(guildData.Settings.VoiceLogs)
	}

	const embed = new EmbedBuilder()
		.setColor(0xFF0000)
		.setTitle(title)
		.setDescription(`–ö–∞–Ω–∞–ª: ${channel.name} (<#${channel.id}>)\nID –ö–∞–Ω–∞–ª–∞: ${channel.id}\n${desc}`)
		.setTimestamp(Date.now())

	await logChannel.send({embeds: [embed], allowedMentions: { repliedUser: false }})
}

/* ========================================================================== */
/*                                  COMMANDS                                  */
/* ========================================================================== */
const stateText = {
	"hide": "—Å–∫—Ä—ã—Ç",
	"lock": "–∑–∞–∫—Ä—ã—Ç",
	"unlock": "–æ—Ç–∫—Ä—ã—Ç"
}
async function SetVoiceState(interaction, voiceChannel, newState)
{
	let guild = voiceChannel.guild
	let newPerms = {
		ViewChannel: null,
		Connect: null,
	}

	switch(newState)
	{
		case "lock":
			newPerms.Connect = false
			break;
		case "hide":
			newPerms.ViewChannel = false
			break;
	}

	await voiceChannel.permissionOverwrites.edit(guild.id, newPerms)
	await UpdateMenu(false, voiceChannel)
	await interaction.reply({ content: `–ö–∞–Ω–∞–ª —Ç–µ–ø–µ—Ä—å ${stateText[ newState ]}.`, ephemeral: true })
	VoiceLog(voiceChannel, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞', `–í–∏–¥–∏–º–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞: ${stateText[ newState ]}`)
	return true
}

async function SetVoiceOwner(interaction, voiceChannel, newOwner)
{
	if (!newOwner.voice || newOwner.voice.channelId != voiceChannel.id)
	{
		await interaction.reply({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º –ª–∏—á–Ω–æ–º –∫–∞–Ω–∞–ª–µ.`, ephemeral: true })
		return true
	}

	let voiceOwner = GetOwner(voiceChannel)
	if (voiceOwner == newOwner.id)
	{
		await interaction.reply({ content: `–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–ª–∞–¥–µ–ª–µ–µ—Ç —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–≤.`, ephemeral: true })
		return true
	}

	await voiceChannel.permissionOverwrites.edit(newOwner.id, {
		ManageChannels: true,
		MoveMembers: true,
		ViewChannel: true,
		Connect: true
	})
	await voiceChannel.permissionOverwrites.edit(voiceOwner, {
		ManageChannels: null,
		MoveMembers: null,
		Connect: null,
	})

	try {
		await interaction.reply({ content: `–ö–∞–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–Ω <@${newOwner.id}>.`, ephemeral: true })
	} catch(e) { }

	let textChannel = await GetTextChannel(voiceChannel)
	await textChannel.permissionOverwrites.edit(newOwner.id, {
		ViewChannel: true,
	})
	await textChannel.permissionOverwrites.edit(voiceOwner, {
		ViewChannel: null,
	})

	
	await UpdateMenu(textChannel, voiceChannel)
	await voiceChannel.send({ content: `–ö–∞–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–Ω <@${newOwner.id}>.`, allowedMentions: { users: [newOwner.id] } })
	VoiceLog(voiceChannel, '–ü–µ—Ä–µ–¥–∞—á–∞ –∫–∞–Ω–∞–ª–∞', `–ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: <@${newOwner.id}>`)
	return true
}

async function VoiceBan(interaction, voiceChannel, member)
{
	let voiceOwner = GetOwner(voiceChannel)
	if (voiceOwner == member.id)
	{
		await interaction.reply({ content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.`, ephemeral: true })
		return true
	}

	let memberPerms = voiceChannel.permissionOverwrites.cache.get(member.id)
	let isBanned = memberPerms?.deny.has(PermissionFlagsBits.ViewChannel) || false
	voiceChannel.permissionOverwrites.create(member.id, {
		Connect: null,
		ViewChannel: isBanned,
	})

	if(!isBanned && voiceChannel.members.has(member.id))
		member.voice.disconnect("–ó–∞–±–∞–Ω–µ–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")

	await interaction.reply({ content: `<@${member.id}> –±—ã–ª ${isBanned ? "—Ä–∞–∑–±–∞–Ω–µ–Ω" : "–∑–∞–±–∞–Ω–µ–Ω"}.`, allowedMentions: { users: [member.id] }, ephemeral: true })
	VoiceLog(voiceChannel, '–ë–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ', `<@${member.id}> –±—ã–ª ${isBanned ? "—Ä–∞–∑–±–∞–Ω–µ–Ω" : "–∑–∞–±–∞–Ω–µ–Ω"}`)
	return true
}

async function VoiceKick(interaction, voiceChannel, member)
{
	if (!member.voice || member.voice.channelId != voiceChannel.id)
	{
		await interaction.reply({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º –ª–∏—á–Ω–æ–º –∫–∞–Ω–∞–ª–µ.`, ephemeral: true })
		return true
	}

	let voiceOwner = GetOwner(voiceChannel)
	if (voiceOwner == member.id)
	{
		await interaction.reply({ content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≥–Ω–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.`, ephemeral: true })
		return true
	}

	member.voice.disconnect("–ö–∏–∫–Ω—É—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞.")

	await interaction.reply({ content: `–ö–∏–∫–∞–µ–º <@${member.id}>.`, allowedMentions: { users: [member.id] }, ephemeral: true })
	VoiceLog(voiceChannel, '–ö–∏–∫ –≤ –∫–∞–Ω–∞–ª–µ', `–£—á–∞—Å—Ç–Ω–∏–∫: <@${member.id}>`)
	return true
}

/* ========================================================================== */
/*                                   EXPORT                                   */
/* ========================================================================== */
module.exports = {
	IsVoiceChannel,
	GetOwner,
	GetTextChannel,
	GetVoiceChannel,
	RandomOwner,
	UpdateMenu,
	VoiceLog,

	Commands: {
		SetVoiceState,
		SetVoiceOwner,
		VoiceBan,
		VoiceKick,
	},
}