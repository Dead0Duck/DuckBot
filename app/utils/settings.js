const { ButtonBuilder, ButtonStyle, ActionRowBuilder, EmbedBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, TextInputBuilder, ModalBuilder, TextInputStyle } = require('discord.js');

class BaseSetting {
    /**
     * @param {string} label - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {string} field - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –ë–î.
     * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId)} onSuccess - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∞–ø–¥–µ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId)} onDelete - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     */
    constructor(label, field, description, onSuccess = () => { }, onDelete = () => { }) {
        this.label = label
        this.field = field
        this.description = description
        this.onSuccess = onSuccess
        this.onDelete = onDelete
    }
}
/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏—à—å –∑–Ω–∞—á–µ–Ω–∏—è boolean.
 */
class BooleanSetting extends BaseSetting {
    /**
     * @param {string} label - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {string} field - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –ë–î.
     * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {string} trueLabel - –ü–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ true.
     * @param {string} falseLabel - –ü–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ false.
     * @param {function (value, interaction, guildId)} onSuccess - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∞–ø–¥–µ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId)} onDelete - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     */
    constructor(label, field, description, trueLabel, falseLabel, onSuccess = () => { }, onDelete = () => { }) {
        super(label, field, description, onSuccess, onDelete)
        this.trueLabel = trueLabel
        this.falseLabel = falseLabel
        this.type = 'bool'
    }
    components(index, guildId) {
        return [new ButtonBuilder().setLabel(this.trueLabel).setStyle(ButtonStyle.Success).setCustomId(`st:apply:${index}:true:${guildId}`),
        new ButtonBuilder().setLabel(this.falseLabel).setStyle(ButtonStyle.Danger).setCustomId(`st:apply:${index}:false:${guildId}`)]
    }
    value(guildSettings) {
        return `${typeof guildSettings[this.field] === 'undefined' ? "–Ω–µ —É–∫–∞–∑–∞–Ω" : `${guildSettings[this.field] === true ? "–î–∞" : "–ù–µ—Ç"}`} `
    }
    validate() {
        return 0
    }
}
/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ string –∏–∑ —Å–ø–∏—Å–∫–∞.
 * @extends BaseSetting
 */
class SelectStringSetting extends BaseSetting {
    /**
     * @param {string} label - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {string} field - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId): StringSelectMenuBuilder} component - –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è `StringSelectMenuBuilder`
     * @param {function (guildSettings): string} value - –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è string –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ embed.
     * @param {function (interaction, guildId)} onSuccess - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∞–ø–¥–µ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId)} onDelete - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     */
    constructor(label, field, description, component, value, onSuccess = () => { }, onDelete = () => { }) {
        super(label, field, description, onSuccess, onDelete)
        this.component = component
        this.value = value
        this.type = 'selectString'
    }
    validate() {
        return 0
    }
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç string —á–µ—Ä–µ–∑ Modal.
 */
class TextInputSetting extends BaseSetting {
    /**
     * 
     * @param {string} label - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {string} field - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
     * @param {function (interaction, guildId)} modal - –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è `ModalBuilder`
     * @param {function (guildSettings)} value - –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è string –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ embed.
     * @param {function (interaction)} validate - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0, –∞ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å string —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏.
     * @param {function (interaction, guildId)} onSuccess - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∞–ø–¥–µ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId)} onDelete - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     */
    constructor(label, field, modal, value, validate = () => { return 0 }, onSuccess = () => { }, onDelete = () => { }) {
        super(label, field, onSuccess, onDelete)
        this.modal = modal
        this.value = value
        this.validate = validate
        this.type = 'textInput'
    }
}

const Settings = [
    new SelectStringSetting("–§–æ—Ä—É–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π", "PartiesChannel", "–í—ã–±–æ—Ä —Ñ–æ—Ä—É–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π",
        (interaction, guildId) => {
            const channelSelect = new StringSelectMenuBuilder()
                .setMaxValues(1)
            interaction.client.guilds.resolve(guildId).channels.cache.filter(x => x.isThreadOnly()).map((channel) => {
                channelSelect.addOptions(
                    new StringSelectMenuOptionBuilder()
                        .setLabel(channel.name)
                        .setValue(channel.id)
                        .setDescription(typeof channel.parent === 'undefined' ? "–ù–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" : `–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${channel.parent.name}"`)
                )
            })
            return channelSelect
        },
        (guildSettings) => {
            return `${typeof guildSettings.PartiesChannel === 'undefined' ? "–Ω–µ —É–∫–∞–∑–∞–Ω" : `<#${guildSettings.PartiesChannel}>`} `
        }, (interaction, guildId) => {
            // TODO: –∑–∞–º–µ–Ω–∏—Ç—å —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–¥ –≤ —Ñ–æ—Ä—É–º–µ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π
            interaction.client.channels.fetch(interaction.values[0]).then((channel) => {
                channel.threads.create({
                    name: "–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é? –ö–ª–∏–∫–Ω–∏ –Ω–∞ –º–µ–Ω—è!", message: {
                        content: "TODO", components: [
                            new ActionRowBuilder().addComponents(new ButtonBuilder().setCustomId('pt:start').setLabel('–û–±—ä—è–≤–∏—Ç—å –æ –ø–æ–∏—Å–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏').setStyle(ButtonStyle.Primary))
                        ]
                    }
                }).then(async (thread) => {
                    const { GuildSchema } = process.mongo;
                    await GuildSchema.updateOne({ Guild: guildId }, { $set: { PartiesThread: thread.id } })
                }).catch(console.error)
            })
        }, async (interaction, guildId) => {
            const { GuildSchema } = process.mongo;
            const guildData = await GuildSchema.findOne({ Guild: guildId })
            interaction.client.channels.fetch(guildData.PartiesThread).then((channel) => { channel.delete() }).catch(console.error)
            guildData.PartiesThread = ""
            guildData.save()
        }
    ),

    new BooleanSetting("–•–æ—Ç-–¥–æ–≥", "TestBoolean", "–í—ã —Ö–æ—Ç–∏—Ç–µ —Ö–æ—Ç-–¥–æ–≥?", "–î–∞, –æ—á–µ–Ω—å —Ö–æ—á—É", "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ, —è –≤–µ–≥–∞–Ω",
        (value, interaction) => { interaction.followUp({ content: value === 'true' ? "üå≠" : "–û–∫, –º–Ω–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç–∞–Ω–µ—Ç—Å—è.", ephemeral: true }) },
        (interaction) => { interaction.followUp("–ü–µ—á–∞–ª—å–Ω–æ, —á—Ç–æ –≤—ã —Ç–∞–∫ —Å —Ö–æ—Ç-–¥–æ–≥–æ–º –ø–æ—Å—Ç—É–ø–∞–µ—Ç–µ.") }),

    new TextInputSetting("–õ—é–±–∏–º–∞—è –µ–¥–∞", "FavFood", () => {
        return new ModalBuilder({
            title: "–õ—é–±–∏–º–∞—è –µ–¥–∞", components: [
                new ActionRowBuilder().addComponents(new TextInputBuilder().setCustomId('test').setLabel('Test').setStyle(TextInputStyle.Short).setMaxLength(50))
            ]
        })
    }, (guildSettings) => {
        return `${typeof guildSettings.FavFood === 'undefined' ? "–Ω–µ —É–∫–∞–∑–∞–Ω" : guildSettings.FavFood} `
    })
]

const chunk = (arr, size) =>
    Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>
        arr.slice(i * size, i * size + size)
    );

function Components(guildSettings, guild) {
    const guildName = guild.name
    const guildIconURL = guild.iconURL()
    const guildId = guild.id
    const buttons = []
    const actionRows = []

    const embed = new EmbedBuilder()
        .setTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        .setAuthor({ name: guildName, iconURL: guildIconURL })

    Settings.forEach((setting, index) => {
        buttons.push(new ButtonBuilder()
            .setCustomId(`st:prop:${index}:${guildId}`)
            .setLabel(setting.label)
            .setStyle(ButtonStyle.Secondary)
        )
        embed.addFields({
            name: setting.label,
            value: setting.value(guildSettings),
            inline: true
        })
    })

    const groupButtons = chunk(buttons, 5)
    if (groupButtons.length > 4) {
        console.log("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Action Rows.")
    } else {
        groupButtons.forEach((group) => {
            actionRows.push(
                new ActionRowBuilder().addComponents(group)
            )
        })
    }

    const deleteSettings = new ButtonBuilder()
        .setCustomId("st:void:" + guildId)
        .setLabel('–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä')
        .setStyle(ButtonStyle.Danger)
    const deleteRow = new ActionRowBuilder()
        .addComponents(deleteSettings)


    return {
        embed: embed,
        rows: [...actionRows, deleteRow]
    }
}

module.exports = { Data: Settings, Components }