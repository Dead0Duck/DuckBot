const { ChannelFlagsBitField, ButtonBuilder, ButtonStyle, ActionRowBuilder, EmbedBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, TextInputBuilder, ModalBuilder, TextInputStyle, ChannelType, RoleSelectMenuBuilder, UserSelectMenuBuilder, ChannelSelectMenuBuilder } = require('discord.js');
const fs = require('fs');

class BaseSetting {
    /**
     * @param {string} label - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {string} field - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –ë–î.
     * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId)} onSuccess - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∞–ø–¥–µ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId)} onDelete - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     */
    constructor(label, field, description, onSuccess = () => { }, onDelete = () => { }) {
        this.label = label
        this.field = field
        this.description = description
        this.onSuccess = onSuccess
        this.onDelete = onDelete
    }
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏—à—å –∑–Ω–∞—á–µ–Ω–∏—è boolean.
 */
class BooleanSetting extends BaseSetting {
    /**
     * @param {string} label - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {string} field - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –ë–î.
     * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {string} trueLabel - –ü–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ true.
     * @param {string} falseLabel - –ü–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ false.
     * @param {function (value, interaction, guildId)} onSuccess - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∞–ø–¥–µ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId)} onDelete - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @example
     * new BooleanSetting("–•–æ—Ç-–¥–æ–≥", "TestBoolean", "–í—ã —Ö–æ—Ç–∏—Ç–µ —Ö–æ—Ç-–¥–æ–≥?", "–î–∞, –æ—á–µ–Ω—å —Ö–æ—á—É", "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ, —è –≤–µ–≥–∞–Ω",
        (value, interaction) => { interaction.followUp({ content: value === 'true' ? "üå≠" : "–û–∫, –º–Ω–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç–∞–Ω–µ—Ç—Å—è.", ephemeral: true }) },
        (interaction) => { interaction.followUp("–ü–µ—á–∞–ª—å–Ω–æ, —á—Ç–æ –≤—ã —Ç–∞–∫ —Å —Ö–æ—Ç-–¥–æ–≥–æ–º –ø–æ—Å—Ç—É–ø–∞–µ—Ç–µ.") })
     */
    constructor(label, field, description, trueLabel, falseLabel, onSuccess = () => { }, onDelete = () => { }) {
        super(label, field, description, onSuccess, onDelete)
        this.trueLabel = trueLabel
        this.falseLabel = falseLabel
        this.type = 'bool'
    }
    components(index, guildId, data) {
        return [new ButtonBuilder().setLabel(this.trueLabel).setStyle(ButtonStyle.Success).setCustomId(`st:apply:${index}:true:${guildId}`),
        new ButtonBuilder().setLabel(this.falseLabel).setStyle(ButtonStyle.Danger).setCustomId(`st:apply:${index}:false:${guildId}`)]
    }
    value(guildSettings) {
        return `${typeof guildSettings[this.field] === 'undefined' ? "–Ω–µ —É–∫–∞–∑–∞–Ω" : `${guildSettings[this.field] === true ? "–î–∞" : "–ù–µ—Ç"}`} `
    }
    validate() {
        return 0
    }
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ string –∏–∑ —Å–ø–∏—Å–∫–∞.
 */
class SelectStringSetting extends BaseSetting {
    /**
     * @param {string} label - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {string} field - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId, data): StringSelectMenuBuilder} component - –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è `StringSelectMenuBuilder`
     * @param {function (guildSettings): string} value - –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è string –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ embed.
     * @param {string} emptyText - –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –æ–∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç—ã–º.
     * @param {function (interaction, guildId)} onSuccess - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∞–ø–¥–µ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId)} onDelete - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     */
    constructor(label, field, description, component, value, emptyText = "–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", onSuccess = () => { }, onDelete = () => { }) {
        super(label, field, description, onSuccess, onDelete)
        this.emptyText = emptyText
        this.component = component
        this.value = value
        this.type = 'selectString'
    }
    validate() {
        return 0
    }
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á—Ç–æ-—Ç–æ –∏–∑ [–ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ](https://discordjs.guide/message-components/select-menus.html#auto-populating-select-menus) —Å–ø–∏—Å–∫–∞.
 */
class SelectAutoSetting extends BaseSetting {
    /**
     * @param {string} label - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {string} field - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId, data): UserSelectMenuBuilder | RoleSelectMenuBuilder | MentionableSelectMenuBuilder | ChannelSelectMenuBuilder} component - –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è `{User|Role|Mentionable|Channel}SelectMenuBuilder`
     * @param {function (guildSettings): string} value - –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è string –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ embed.
     * @param {function (interaction, guildId)} onSuccess - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∞–ø–¥–µ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId)} onDelete - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     */
    constructor(label, field, description, component, value, onSuccess = () => { }, onDelete = () => { }) {
        super(label, field, description, onSuccess, onDelete)
        this.component = component
        this.value = value
        this.type = 'selectAuto'
    }
    validate() {
        return 0
    }
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç string —á–µ—Ä–µ–∑ Modal.
 */
class TextInputSetting extends BaseSetting {
    /**
     * 
     * @param {string} label - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {string} field - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
     * @param {function (interaction, guildId, data)} modal - –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è `ModalBuilder`
     * @param {function (guildSettings)} value - –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è string –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ embed.
     * @param {function (interaction)} validate - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0, –∞ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å string —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏.
     * @param {function (interaction, guildId)} onSuccess - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∞–ø–¥–µ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @param {function (interaction, guildId)} onDelete - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
     * @example
     * new TextInputSetting("–õ—é–±–∏–º–∞—è –µ–¥–∞", "FavFood", () => {
        return new ModalBuilder({
            title: "–õ—é–±–∏–º–∞—è –µ–¥–∞", components: [
                new ActionRowBuilder().addComponents(new TextInputBuilder().setCustomId('food').setLabel('–õ—é–±–∏–º–∞—è –µ–¥–∞').setStyle(TextInputStyle.Short).setMaxLength(50))
            ]
        })
    }, (guildSettings) => {
        return `${typeof guildSettings.FavFood === 'undefined' ? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞" : guildSettings.FavFood} `
    })
     */
    constructor(label, field, modal, value, validate = () => { return 0 }, onSuccess = () => { }, onDelete = () => { }) {
        super(label, field, onSuccess, onDelete)
        this.modal = modal
        this.value = value
        this.validate = validate
        this.type = 'textInput'
    }
}

const Settings = [
    new SelectAutoSetting("–§–æ—Ä—É–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π", "PartiesChannel", "–í—ã–±–æ—Ä —Ñ–æ—Ä—É–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π",
        (interaction, guildId) => {
            const channelSelect = new ChannelSelectMenuBuilder()
                .setMaxValues(1)
                .setChannelTypes(ChannelType.GuildForum)
            return channelSelect
        },
        (guildSettings) => {
            return `${typeof guildSettings.PartiesChannel === 'undefined' ? "–Ω–µ —É–∫–∞–∑–∞–Ω" : `<#${guildSettings.PartiesChannel}>`} `
        },
        (interaction, guildId) => {
            const partyFAQString = fs.readFileSync('bigstrings/partyfaq.md').toString('utf-8');
            interaction.client.channels.fetch(interaction.values[0]).then((channel) => {
                channel.threads.create({
                    name: "–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é? –ö–ª–∏–∫–Ω–∏ –Ω–∞ –º–µ–Ω—è!", message: {
                        content: partyFAQString, components: [
                            new ActionRowBuilder().addComponents(new ButtonBuilder().setCustomId('pt:start').setLabel('–û–±—ä—è–≤–∏—Ç—å –æ –ø–æ–∏—Å–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏').setStyle(ButtonStyle.Primary))
                        ]
                    }
                }).then(async (thread) => {
                    const { GuildSchema } = process.mongo;
                    const guildData = await GuildSchema.findOne({ Guild: guildId })
                    if (typeof guildData.PartiesThread !== 'undefined') {
                        interaction.client.channels.fetch(guildData.PartiesThread).then((channel) => { channel.delete() }).catch(console.error)
                    }
                    interaction.guild.fetchWebhooks().then(async (webhooks) => {
                        const webhook = webhooks.find(item => item.id === guildData.PartiesWebhookId)
                        if (typeof webhook !== 'undefined') {
                            await webhook.edit({ channel: thread.parent.id })
                        } else {
                            thread.parent.createWebhook({ name: 'DuckBot Parties' }).then((webhook) => {
                                guildData.PartiesWebhookId = webhook.id
                                guildData.PartiesWebhookToken = webhook.token
                                guildData.save()
                                interaction.followUp({ content: '> ‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ `DuckBot Parties`. –ù–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö **–Ω–µ —É–¥–∞–ª—è–π—Ç–µ –∏ –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –µ–≥–æ**. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è **–±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ**.', ephemeral: true })

                            })
                        }
                    })
                    guildData.PartiesThread = thread.id
                    guildData.save()
                    const pinnedThread = thread.parent.threads.cache.find(thread => thread.flags.has(ChannelFlagsBitField.Flags.Pinned))
                    if (typeof pinnedThread !== 'undefined') {
                        pinnedThread.unpin()
                    }
                    thread.pin()
                }).catch(console.error)
            })
        }, async (interaction, guildId) => {
            const { GuildSchema } = process.mongo;
            const guildData = await GuildSchema.findOne({ Guild: guildId })
            interaction.client.channels.fetch(guildData.PartiesThread).then((channel) => { channel.delete() }).catch(console.error)
            interaction.guild.fetchWebhooks().then(async (webhooks) => {
                const webhook = webhooks.find(item => item.id === guildData.PartiesWebhookId)
                if (typeof webhook !== 'undefined') {
                    await webhook.delete()
                }
                guildData.PartiesWebhookId = undefined
                guildData.PartiesWebhookToken = undefined
                guildData.save()
            })
            guildData.PartiesThread = undefined
            guildData.save()
        }
    ),

    new SelectAutoSetting("–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ –ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç", "VoiceLogs", "–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç",
        (interaction, guildId) => {
            const channelSelect = new ChannelSelectMenuBuilder()
                .setMaxValues(1)
				.setChannelTypes(ChannelType.GuildText)
            return channelSelect
        },
        (guildSettings) => {
            return `${typeof guildSettings.VoiceLogs === 'undefined' ? "–Ω–µ —É–∫–∞–∑–∞–Ω" : `<#${guildSettings.VoiceLogs}>`} `
        }
    ),

    new SelectAutoSetting("–†–æ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "RegRole", "–í—ã–±–æ—Ä —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—É—é –±–æ—Ç –≤—ã–¥–∞—Å—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        (interaction, guildId) => {
            const roleSelect = new RoleSelectMenuBuilder()
            roleSelect.setMaxValues(1)

            return roleSelect
        },
        (guildSettings) => {
            return `${typeof guildSettings.RegRole === 'undefined' ? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞" : `<@&${guildSettings.RegRole}>`} `
        }
    ),

    /* new TextInputSetting("–¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞–Ω—Ç–∞", "RegText", (interaction, guildId, data) => {
        return new ModalBuilder({
            title: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", components: [
                new ActionRowBuilder().addComponents(new TextInputBuilder()
                    .setCustomId('regtext')
                    .setLabel('–¢–µ–∫—Å—Ç')
                    .setStyle(TextInputStyle.Paragraph)
                    .setMaxLength(1900)
                    .setValue(data || "")
                    .setPlaceholder())
            ]
        })
    }, (guildSettings) => {
        return `${typeof guildSettings.RegText === 'undefined' ? "–Ω–µ —É–∫–∞–∑–∞–Ω" : "—É–∫–∞–∑–∞–Ω"} `
    }) */
]

const chunk = (arr, size) =>
    Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>
        arr.slice(i * size, i * size + size)
    );

function Components(guildSettings, guild) {
    const guildName = guild.name
    const guildIconURL = guild.iconURL()
    const guildId = guild.id
    const buttons = []
    const actionRows = []

    const embed = new EmbedBuilder()
        .setTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        .setAuthor({ name: guildName, iconURL: guildIconURL })

    Settings.forEach((setting, index) => {
        buttons.push(new ButtonBuilder()
            .setCustomId(`st:prop:${index}:${guildId}`)
            .setLabel(setting.label)
            .setStyle(ButtonStyle.Secondary)
        )
        embed.addFields({
            name: setting.label,
            value: setting.value(guildSettings),
            inline: true
        })
    })

    const groupButtons = chunk(buttons, 5)
    if (groupButtons.length > 4) {
        console.log("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Action Rows.")
    } else {
        groupButtons.forEach((group) => {
            actionRows.push(
                new ActionRowBuilder().addComponents(group)
            )
        })
    }

    const deleteSettings = new ButtonBuilder()
        .setCustomId("st:void:" + guildId)
        .setLabel('–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä')
        .setStyle(ButtonStyle.Danger)
    const deleteRow = new ActionRowBuilder()
        .addComponents(deleteSettings)


    return {
        embed: embed,
        rows: [...actionRows, deleteRow]
    }
}

module.exports = { Data: Settings, Components }